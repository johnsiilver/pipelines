// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        (unknown)
// source: pipelines/stagedpipe/distrib/nodes/overseer/proto/overseer.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NodeType is the type of node that is registering.
type NodeType int32

const (
	NodeType_NT_UNKNOWN     NodeType = 0
	NodeType_NT_WORKER      NodeType = 1
	NodeType_NT_COORDINATOR NodeType = 2
	NodeType_NT_OVERSEER    NodeType = 3 // Overseer is a node type, but at this time it is not used.
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0: "NT_UNKNOWN",
		1: "NT_WORKER",
		2: "NT_COORDINATOR",
		3: "NT_OVERSEER",
	}
	NodeType_value = map[string]int32{
		"NT_UNKNOWN":     0,
		"NT_WORKER":      1,
		"NT_COORDINATOR": 2,
		"NT_OVERSEER":    3,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_enumTypes[0].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_enumTypes[0]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{0}
}

// CoordinatorReq requests the Overseer to get the address of a coordinator to use.
type CoordinatorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CoordinatorReq) Reset() {
	*x = CoordinatorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinatorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinatorReq) ProtoMessage() {}

func (x *CoordinatorReq) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinatorReq.ProtoReflect.Descriptor instead.
func (*CoordinatorReq) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{0}
}

// CoordinatorResp informs the client of the address of a coordinator to use.
type CoordinatorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *CoordinatorResp) Reset() {
	*x = CoordinatorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinatorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinatorResp) ProtoMessage() {}

func (x *CoordinatorResp) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinatorResp.ProtoReflect.Descriptor instead.
func (*CoordinatorResp) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{1}
}

func (x *CoordinatorResp) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// SubscribeIn is used by a node to register with the Overseer and send messages. As long as the node
// is connected and completes its registration, the Overseer considers the node alive
// for processing.
type SubscribeIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*SubscribeIn_Register
	//	*SubscribeIn_Ack
	//	*SubscribeIn_LoadTracking
	Message isSubscribeIn_Message `protobuf_oneof:"Message"`
}

func (x *SubscribeIn) Reset() {
	*x = SubscribeIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeIn) ProtoMessage() {}

func (x *SubscribeIn) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeIn.ProtoReflect.Descriptor instead.
func (*SubscribeIn) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{2}
}

func (m *SubscribeIn) GetMessage() isSubscribeIn_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *SubscribeIn) GetRegister() *RegisterReq {
	if x, ok := x.GetMessage().(*SubscribeIn_Register); ok {
		return x.Register
	}
	return nil
}

func (x *SubscribeIn) GetAck() *Ack {
	if x, ok := x.GetMessage().(*SubscribeIn_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *SubscribeIn) GetLoadTracking() *LoadTracking {
	if x, ok := x.GetMessage().(*SubscribeIn_LoadTracking); ok {
		return x.LoadTracking
	}
	return nil
}

type isSubscribeIn_Message interface {
	isSubscribeIn_Message()
}

type SubscribeIn_Register struct {
	Register *RegisterReq `protobuf:"bytes,1,opt,name=register,proto3,oneof"`
}

type SubscribeIn_Ack struct {
	Ack *Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

type SubscribeIn_LoadTracking struct {
	LoadTracking *LoadTracking `protobuf:"bytes,3,opt,name=load_tracking,json=loadTracking,proto3,oneof"`
}

func (*SubscribeIn_Register) isSubscribeIn_Message() {}

func (*SubscribeIn_Ack) isSubscribeIn_Message() {}

func (*SubscribeIn_LoadTracking) isSubscribeIn_Message() {}

// LoadTracking is used by a coordinator to tell the Overseer that it has added or removed some load.
type LoadTracking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of load you want to add or subtract.
	Add int64 `protobuf:"varint,1,opt,name=add,proto3" json:"add,omitempty"`
}

func (x *LoadTracking) Reset() {
	*x = LoadTracking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadTracking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadTracking) ProtoMessage() {}

func (x *LoadTracking) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadTracking.ProtoReflect.Descriptor instead.
func (*LoadTracking) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{3}
}

func (x *LoadTracking) GetAdd() int64 {
	if x != nil {
		return x.Add
	}
	return 0
}

// Ack is used by a node to acknowledge a message from the Overseer. This is only used for
// messages that require an acknowledgement before some other action can take place.
type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the message being acknowledged.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// An error message, if any.
	ErrMsg string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{4}
}

func (x *Ack) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ack) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

// SubscribeOut is used by the Overseer to send messages to a node.
type SubscribeOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*SubscribeOut_Register
	//	*SubscribeOut_UpdateWorker
	//	*SubscribeOut_UpdateCoordinator
	Message isSubscribeOut_Message `protobuf_oneof:"Message"`
}

func (x *SubscribeOut) Reset() {
	*x = SubscribeOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOut) ProtoMessage() {}

func (x *SubscribeOut) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOut.ProtoReflect.Descriptor instead.
func (*SubscribeOut) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{5}
}

func (m *SubscribeOut) GetMessage() isSubscribeOut_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *SubscribeOut) GetRegister() *RegisterResp {
	if x, ok := x.GetMessage().(*SubscribeOut_Register); ok {
		return x.Register
	}
	return nil
}

func (x *SubscribeOut) GetUpdateWorker() *UpdateWorker {
	if x, ok := x.GetMessage().(*SubscribeOut_UpdateWorker); ok {
		return x.UpdateWorker
	}
	return nil
}

func (x *SubscribeOut) GetUpdateCoordinator() *UpdateCoordinator {
	if x, ok := x.GetMessage().(*SubscribeOut_UpdateCoordinator); ok {
		return x.UpdateCoordinator
	}
	return nil
}

type isSubscribeOut_Message interface {
	isSubscribeOut_Message()
}

type SubscribeOut_Register struct {
	Register *RegisterResp `protobuf:"bytes,1,opt,name=register,proto3,oneof"`
}

type SubscribeOut_UpdateWorker struct {
	UpdateWorker *UpdateWorker `protobuf:"bytes,2,opt,name=update_worker,json=updateWorker,proto3,oneof"`
}

type SubscribeOut_UpdateCoordinator struct {
	UpdateCoordinator *UpdateCoordinator `protobuf:"bytes,3,opt,name=update_coordinator,json=updateCoordinator,proto3,oneof"`
}

func (*SubscribeOut_Register) isSubscribeOut_Message() {}

func (*SubscribeOut_UpdateWorker) isSubscribeOut_Message() {}

func (*SubscribeOut_UpdateCoordinator) isSubscribeOut_Message() {}

// RegisterReq is used by a node to register with the Overseer. The process is different
// for each node type.
type RegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*RegisterReq_Init
	//	*RegisterReq_Fin
	Message isRegisterReq_Message `protobuf_oneof:"Message"`
}

func (x *RegisterReq) Reset() {
	*x = RegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReq) ProtoMessage() {}

func (x *RegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReq.ProtoReflect.Descriptor instead.
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{6}
}

func (m *RegisterReq) GetMessage() isRegisterReq_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *RegisterReq) GetInit() *RegisterInit {
	if x, ok := x.GetMessage().(*RegisterReq_Init); ok {
		return x.Init
	}
	return nil
}

func (x *RegisterReq) GetFin() *RegisterFin {
	if x, ok := x.GetMessage().(*RegisterReq_Fin); ok {
		return x.Fin
	}
	return nil
}

type isRegisterReq_Message interface {
	isRegisterReq_Message()
}

type RegisterReq_Init struct {
	Init *RegisterInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type RegisterReq_Fin struct {
	Fin *RegisterFin `protobuf:"bytes,2,opt,name=fin,proto3,oneof"`
}

func (*RegisterReq_Init) isRegisterReq_Message() {}

func (*RegisterReq_Fin) isRegisterReq_Message() {}

// RegisterInit is used by a node to register with the Overseer.
type RegisterInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the node's gRPC server.
	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	// The type of node.
	Type NodeType `protobuf:"varint,2,opt,name=Type,proto3,enum=stagedpipe.distrib.nodes.oversser.NodeType" json:"Type,omitempty"`
}

func (x *RegisterInit) Reset() {
	*x = RegisterInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterInit) ProtoMessage() {}

func (x *RegisterInit) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterInit.ProtoReflect.Descriptor instead.
func (*RegisterInit) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterInit) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RegisterInit) GetType() NodeType {
	if x != nil {
		return x.Type
	}
	return NodeType_NT_UNKNOWN
}

// RegisterResp is used by the Overseer to respond to a node's registration request.
type RegisterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*RegisterResp_LoadPlugin
	//	*RegisterResp_Workers
	//	*RegisterResp_Fin
	Message isRegisterResp_Message `protobuf_oneof:"Message"`
}

func (x *RegisterResp) Reset() {
	*x = RegisterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResp) ProtoMessage() {}

func (x *RegisterResp) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResp.ProtoReflect.Descriptor instead.
func (*RegisterResp) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{8}
}

func (m *RegisterResp) GetMessage() isRegisterResp_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *RegisterResp) GetLoadPlugin() *LoadPlugin {
	if x, ok := x.GetMessage().(*RegisterResp_LoadPlugin); ok {
		return x.LoadPlugin
	}
	return nil
}

func (x *RegisterResp) GetWorkers() *Workers {
	if x, ok := x.GetMessage().(*RegisterResp_Workers); ok {
		return x.Workers
	}
	return nil
}

func (x *RegisterResp) GetFin() *RegisterFin {
	if x, ok := x.GetMessage().(*RegisterResp_Fin); ok {
		return x.Fin
	}
	return nil
}

type isRegisterResp_Message interface {
	isRegisterResp_Message()
}

type RegisterResp_LoadPlugin struct {
	// The Overseer sends all the plugins that the node should load, if it is a worker.
	LoadPlugin *LoadPlugin `protobuf:"bytes,1,opt,name=load_plugin,json=loadPlugin,proto3,oneof"`
}

type RegisterResp_Workers struct {
	// The Overseer sends a set of workers that a coordinator should use.
	Workers *Workers `protobuf:"bytes,2,opt,name=workers,proto3,oneof"`
}

type RegisterResp_Fin struct {
	// This is used to tell the node that it has completed its registration.
	Fin *RegisterFin `protobuf:"bytes,3,opt,name=fin,proto3,oneof"`
}

func (*RegisterResp_LoadPlugin) isRegisterResp_Message() {}

func (*RegisterResp_Workers) isRegisterResp_Message() {}

func (*RegisterResp_Fin) isRegisterResp_Message() {}

// Represents a worker node.
type Worker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the worker's gRPC server.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Worker) Reset() {
	*x = Worker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{9}
}

func (x *Worker) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Workers is used by the Overseer to tell a coordinator which workers to use.
type Workers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddWorkers []*Worker `protobuf:"bytes,1,rep,name=add_workers,json=addWorkers,proto3" json:"add_workers,omitempty"`
}

func (x *Workers) Reset() {
	*x = Workers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workers) ProtoMessage() {}

func (x *Workers) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workers.ProtoReflect.Descriptor instead.
func (*Workers) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{10}
}

func (x *Workers) GetAddWorkers() []*Worker {
	if x != nil {
		return x.AddWorkers
	}
	return nil
}

// RegisterFin is used by the Overseer to tell a node that it has completed its registration.
type RegisterFin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterFin) Reset() {
	*x = RegisterFin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterFin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterFin) ProtoMessage() {}

func (x *RegisterFin) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterFin.ProtoReflect.Descriptor instead.
func (*RegisterFin) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{11}
}

// LoadPlugin is a plugin that should be loaded by the worker node.
type LoadPlugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the plugin binary.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The plugin binary itself.
	Plugin []byte `protobuf:"bytes,2,opt,name=plugin,proto3" json:"plugin,omitempty"`
}

func (x *LoadPlugin) Reset() {
	*x = LoadPlugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadPlugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadPlugin) ProtoMessage() {}

func (x *LoadPlugin) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadPlugin.ProtoReflect.Descriptor instead.
func (*LoadPlugin) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{12}
}

func (x *LoadPlugin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoadPlugin) GetPlugin() []byte {
	if x != nil {
		return x.Plugin
	}
	return nil
}

// Used by the Overseer to tell a worker to make some updates.
type UpdateWorker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Message:
	//	*UpdateWorker_Plugin
	Message isUpdateWorker_Message `protobuf_oneof:"message"`
}

func (x *UpdateWorker) Reset() {
	*x = UpdateWorker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorker) ProtoMessage() {}

func (x *UpdateWorker) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorker.ProtoReflect.Descriptor instead.
func (*UpdateWorker) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateWorker) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *UpdateWorker) GetMessage() isUpdateWorker_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *UpdateWorker) GetPlugin() *LoadPlugin {
	if x, ok := x.GetMessage().(*UpdateWorker_Plugin); ok {
		return x.Plugin
	}
	return nil
}

type isUpdateWorker_Message interface {
	isUpdateWorker_Message()
}

type UpdateWorker_Plugin struct {
	// Updates the plugin that the worker should load.
	Plugin *LoadPlugin `protobuf:"bytes,2,opt,name=plugin,proto3,oneof"`
}

func (*UpdateWorker_Plugin) isUpdateWorker_Message() {}

// Used by the Overseer to tell a coordinator to make some updates.
type UpdateCoordinator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Message:
	//	*UpdateCoordinator_Workers
	Message isUpdateCoordinator_Message `protobuf_oneof:"message"`
}

func (x *UpdateCoordinator) Reset() {
	*x = UpdateCoordinator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoordinator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoordinator) ProtoMessage() {}

func (x *UpdateCoordinator) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoordinator.ProtoReflect.Descriptor instead.
func (*UpdateCoordinator) Descriptor() ([]byte, []int) {
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateCoordinator) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *UpdateCoordinator) GetMessage() isUpdateCoordinator_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *UpdateCoordinator) GetWorkers() *Workers {
	if x, ok := x.GetMessage().(*UpdateCoordinator_Workers); ok {
		return x.Workers
	}
	return nil
}

type isUpdateCoordinator_Message interface {
	isUpdateCoordinator_Message()
}

type UpdateCoordinator_Workers struct {
	// Updates the workers that the coordinator should use.
	Workers *Workers `protobuf:"bytes,2,opt,name=workers,proto3,oneof"`
}

func (*UpdateCoordinator_Workers) isUpdateCoordinator_Message() {}

var File_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto protoreflect.FileDescriptor

var file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDesc = []byte{
	0x0a, 0x40, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x64, 0x70, 0x69, 0x70, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x65, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x21, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x73, 0x65, 0x72, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x22, 0x2b, 0x0a, 0x0f, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x49, 0x6e, 0x12, 0x4c, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x70,
	0x69, 0x70, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x56,
	0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x70, 0x69,
	0x70, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x20, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x61, 0x64, 0x64, 0x22, 0x2e, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x4d, 0x73, 0x67, 0x22, 0xa7, 0x02, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x70,
	0x69, 0x70, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x64, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x12, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64,
	0x70, 0x69, 0x70, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa3, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a,
	0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x64, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x69, 0x6e, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x03, 0x66, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x03, 0x66, 0x69, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x64, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf7,
	0x01, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x50, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x70, 0x69, 0x70,
	0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x12, 0x46, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x70, 0x69, 0x70, 0x65, 0x2e,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x03, 0x66, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x70,
	0x69, 0x70, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x66, 0x69, 0x6e, 0x42, 0x09, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x22, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a, 0x07,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x64, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46,
	0x69, 0x6e, 0x22, 0x38, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x72, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x06,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x64, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x76, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x70,
	0x69, 0x70, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x48, 0x00, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x4e, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x49,
	0x4e, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x54, 0x5f, 0x4f, 0x56,
	0x45, 0x52, 0x53, 0x45, 0x45, 0x52, 0x10, 0x03, 0x32, 0xf6, 0x01, 0x0a, 0x08, 0x4f, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x65, 0x72, 0x12, 0x72, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x2e, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x70, 0x69, 0x70, 0x65, 0x2e,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x49, 0x6e, 0x1a, 0x2f, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x70, 0x69, 0x70, 0x65, 0x2e,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x4f, 0x75, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x76, 0x0a, 0x0b, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x64, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x64, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6a, 0x6f, 0x68, 0x6e, 0x73, 0x69, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x70, 0x69, 0x70, 0x65,
	0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescOnce sync.Once
	file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescData = file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDesc
)

func file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescGZIP() []byte {
	file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescOnce.Do(func() {
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescData = protoimpl.X.CompressGZIP(file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescData)
	})
	return file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDescData
}

var file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_goTypes = []interface{}{
	(NodeType)(0),             // 0: stagedpipe.distrib.nodes.oversser.NodeType
	(*CoordinatorReq)(nil),    // 1: stagedpipe.distrib.nodes.oversser.CoordinatorReq
	(*CoordinatorResp)(nil),   // 2: stagedpipe.distrib.nodes.oversser.CoordinatorResp
	(*SubscribeIn)(nil),       // 3: stagedpipe.distrib.nodes.oversser.SubscribeIn
	(*LoadTracking)(nil),      // 4: stagedpipe.distrib.nodes.oversser.LoadTracking
	(*Ack)(nil),               // 5: stagedpipe.distrib.nodes.oversser.Ack
	(*SubscribeOut)(nil),      // 6: stagedpipe.distrib.nodes.oversser.SubscribeOut
	(*RegisterReq)(nil),       // 7: stagedpipe.distrib.nodes.oversser.RegisterReq
	(*RegisterInit)(nil),      // 8: stagedpipe.distrib.nodes.oversser.RegisterInit
	(*RegisterResp)(nil),      // 9: stagedpipe.distrib.nodes.oversser.RegisterResp
	(*Worker)(nil),            // 10: stagedpipe.distrib.nodes.oversser.Worker
	(*Workers)(nil),           // 11: stagedpipe.distrib.nodes.oversser.Workers
	(*RegisterFin)(nil),       // 12: stagedpipe.distrib.nodes.oversser.RegisterFin
	(*LoadPlugin)(nil),        // 13: stagedpipe.distrib.nodes.oversser.LoadPlugin
	(*UpdateWorker)(nil),      // 14: stagedpipe.distrib.nodes.oversser.UpdateWorker
	(*UpdateCoordinator)(nil), // 15: stagedpipe.distrib.nodes.oversser.UpdateCoordinator
}
var file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_depIdxs = []int32{
	7,  // 0: stagedpipe.distrib.nodes.oversser.SubscribeIn.register:type_name -> stagedpipe.distrib.nodes.oversser.RegisterReq
	5,  // 1: stagedpipe.distrib.nodes.oversser.SubscribeIn.ack:type_name -> stagedpipe.distrib.nodes.oversser.Ack
	4,  // 2: stagedpipe.distrib.nodes.oversser.SubscribeIn.load_tracking:type_name -> stagedpipe.distrib.nodes.oversser.LoadTracking
	9,  // 3: stagedpipe.distrib.nodes.oversser.SubscribeOut.register:type_name -> stagedpipe.distrib.nodes.oversser.RegisterResp
	14, // 4: stagedpipe.distrib.nodes.oversser.SubscribeOut.update_worker:type_name -> stagedpipe.distrib.nodes.oversser.UpdateWorker
	15, // 5: stagedpipe.distrib.nodes.oversser.SubscribeOut.update_coordinator:type_name -> stagedpipe.distrib.nodes.oversser.UpdateCoordinator
	8,  // 6: stagedpipe.distrib.nodes.oversser.RegisterReq.init:type_name -> stagedpipe.distrib.nodes.oversser.RegisterInit
	12, // 7: stagedpipe.distrib.nodes.oversser.RegisterReq.fin:type_name -> stagedpipe.distrib.nodes.oversser.RegisterFin
	0,  // 8: stagedpipe.distrib.nodes.oversser.RegisterInit.Type:type_name -> stagedpipe.distrib.nodes.oversser.NodeType
	13, // 9: stagedpipe.distrib.nodes.oversser.RegisterResp.load_plugin:type_name -> stagedpipe.distrib.nodes.oversser.LoadPlugin
	11, // 10: stagedpipe.distrib.nodes.oversser.RegisterResp.workers:type_name -> stagedpipe.distrib.nodes.oversser.Workers
	12, // 11: stagedpipe.distrib.nodes.oversser.RegisterResp.fin:type_name -> stagedpipe.distrib.nodes.oversser.RegisterFin
	10, // 12: stagedpipe.distrib.nodes.oversser.Workers.add_workers:type_name -> stagedpipe.distrib.nodes.oversser.Worker
	13, // 13: stagedpipe.distrib.nodes.oversser.UpdateWorker.plugin:type_name -> stagedpipe.distrib.nodes.oversser.LoadPlugin
	11, // 14: stagedpipe.distrib.nodes.oversser.UpdateCoordinator.workers:type_name -> stagedpipe.distrib.nodes.oversser.Workers
	3,  // 15: stagedpipe.distrib.nodes.oversser.Overseer.Subscribe:input_type -> stagedpipe.distrib.nodes.oversser.SubscribeIn
	1,  // 16: stagedpipe.distrib.nodes.oversser.Overseer.Coordinator:input_type -> stagedpipe.distrib.nodes.oversser.CoordinatorReq
	6,  // 17: stagedpipe.distrib.nodes.oversser.Overseer.Subscribe:output_type -> stagedpipe.distrib.nodes.oversser.SubscribeOut
	2,  // 18: stagedpipe.distrib.nodes.oversser.Overseer.Coordinator:output_type -> stagedpipe.distrib.nodes.oversser.CoordinatorResp
	17, // [17:19] is the sub-list for method output_type
	15, // [15:17] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_init() }
func file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_init() {
	if File_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinatorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinatorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadTracking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterFin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadPlugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoordinator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SubscribeIn_Register)(nil),
		(*SubscribeIn_Ack)(nil),
		(*SubscribeIn_LoadTracking)(nil),
	}
	file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*SubscribeOut_Register)(nil),
		(*SubscribeOut_UpdateWorker)(nil),
		(*SubscribeOut_UpdateCoordinator)(nil),
	}
	file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*RegisterReq_Init)(nil),
		(*RegisterReq_Fin)(nil),
	}
	file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*RegisterResp_LoadPlugin)(nil),
		(*RegisterResp_Workers)(nil),
		(*RegisterResp_Fin)(nil),
	}
	file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*UpdateWorker_Plugin)(nil),
	}
	file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*UpdateCoordinator_Workers)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_goTypes,
		DependencyIndexes: file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_depIdxs,
		EnumInfos:         file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_enumTypes,
		MessageInfos:      file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_msgTypes,
	}.Build()
	File_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto = out.File
	file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_rawDesc = nil
	file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_goTypes = nil
	file_pipelines_stagedpipe_distrib_nodes_overseer_proto_overseer_proto_depIdxs = nil
}
